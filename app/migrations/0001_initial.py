# Generated by Django 5.2.7 on 2025-10-26 01:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Promocion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.CharField(max_length=200)),
                ('fecha_inicio', models.DateField()),
                ('fecha_fin', models.DateField()),
                ('descuento', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='TipoGarantia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(max_length=100, unique=True)),
                ('duracion', models.PositiveIntegerField(default=12, help_text='Duración predeterminada de la garantía en meses')),
                ('descripcion', models.TextField(blank=True, help_text='Descripción adicional del tipo de garantía', null=True)),
                ('activa', models.BooleanField(default=True, help_text='Indica si este tipo de garantía está activa y disponible para su uso.')),
                ('fecha_inicio', models.DateField(blank=True, help_text='Fecha de inicio de la vigencia de la garantía.', null=True)),
                ('fecha_fin', models.DateField(blank=True, help_text='Fecha de fin de la vigencia de la garantía.', null=True)),
                ('limite_de_reemplazos', models.PositiveIntegerField(blank=True, help_text='Número máximo de reemplazos cubiertos por esta garantía.', null=True)),
                ('exclusiones', models.TextField(blank=True, help_text='Exclusiones o condiciones especiales de la garantía que no están cubiertas.', null=True)),
                ('cobertura', models.TextField(blank=True, help_text='Descripción de lo que está cubierto por la garantía.', null=True)),
                ('documentacion', models.FileField(blank=True, help_text='Archivo PDF o documento relacionado con la garantía.', null=True, upload_to='documentos_garantia/')),
                ('activo_para_ventas', models.BooleanField(default=True, help_text='Indica si este tipo de garantía está disponible para las ventas actuales.')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nombre', models.CharField(max_length=255)),
                ('apellido_paterno', models.CharField(max_length=255)),
                ('apellido_materno', models.CharField(max_length=255)),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino')], max_length=1, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('direccion', models.CharField(blank=True, max_length=255, null=True)),
                ('fecha_nacimiento', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Bitacora',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.DateTimeField()),
                ('logout', models.DateTimeField(blank=True, null=True)),
                ('ip', models.GenericIPAddressField(blank=True, help_text='Dirección IPv4 o IPv6 del dispositivo', null=True)),
                ('device', models.CharField(blank=True, help_text="Ubicación aproximada (p.ej. 'Ciudad, País' o 'lat,lon')", max_length=255, null=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bitacora',
            },
        ),
        migrations.CreateModel(
            name='Carrito',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart_token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('estado', models.CharField(choices=[('open', 'Abierto'), ('converting', 'Convirtiendo'), ('ordered', 'Pedido')], default='open', max_length=20)),
                ('creado', models.DateTimeField(auto_now_add=True)),
                ('actualizado', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carritos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'carrito',
                'ordering': ['-actualizado'],
            },
        ),
        migrations.CreateModel(
            name='DetalleBitacora',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accion', models.CharField(max_length=100)),
                ('fecha', models.DateTimeField()),
                ('tabla', models.CharField(max_length=50)),
                ('bitacora', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detallebitacoras', to='app.bitacora')),
            ],
            options={
                'db_table': 'detallebitacora',
            },
        ),
        migrations.CreateModel(
            name='DispositivoMovil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_fcm', models.TextField(help_text='Token de Firebase Cloud Messaging para enviar notificaciones push', unique=True)),
                ('modelo_dispositivo', models.CharField(blank=True, help_text='Ej: iPhone 14, Samsung Galaxy S23', max_length=255, null=True)),
                ('sistema_operativo', models.CharField(blank=True, help_text='iOS, Android, etc.', max_length=50, null=True)),
                ('activo', models.BooleanField(default=True, help_text='Indica si el dispositivo sigue recibiendo notificaciones')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True)),
                ('ultima_conexion', models.DateTimeField(blank=True, help_text='Última vez que la app se conectó o renovó el token', null=True)),
                ('usuario', models.ForeignKey(help_text='Usuario propietario del dispositivo', on_delete=django.db.models.deletion.CASCADE, related_name='dispositivos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dispositivo Móvil',
                'verbose_name_plural': 'Dispositivos Móviles',
                'ordering': ['-fecha_registro'],
            },
        ),
        migrations.CreateModel(
            name='NotificacionPush',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=150)),
                ('cuerpo', models.TextField()),
                ('tipo', models.CharField(choices=[('seguridad', 'Seguridad'), ('finanzas', 'Finanzas'), ('areas_comunes', 'Áreas Comunes'), ('mantenimiento', 'Mantenimiento'), ('comunicado', 'Comunicado'), ('sistema', 'Sistema')], default='sistema', max_length=50)),
                ('estado', models.CharField(choices=[('enviada', 'Enviada'), ('entregada', 'Entregada'), ('leida', 'Leída'), ('fallida', 'Fallida')], default='enviada', max_length=20)),
                ('fecha_envio', models.DateTimeField(auto_now_add=True)),
                ('fecha_entrega', models.DateTimeField(blank=True, help_text='Cuando FCM confirma entrega', null=True)),
                ('fecha_lectura', models.DateTimeField(blank=True, null=True)),
                ('datos_adicionales', models.JSONField(blank=True, help_text='Payload adicional (ej: id de incidente, url, acción)', null=True)),
                ('intento_envio', models.PositiveSmallIntegerField(default=1)),
                ('dispositivo', models.ForeignKey(blank=True, help_text='Dispositivo al que se envió la notificación', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notificaciones_enviadas', to='app.dispositivomovil')),
                ('usuario', models.ForeignKey(help_text='Usuario destinatario de la notificación', on_delete=django.db.models.deletion.CASCADE, related_name='notificaciones_push', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notificación Push',
                'verbose_name_plural': 'Notificaciones Push',
                'ordering': ['-fecha_envio'],
            },
        ),
        migrations.CreateModel(
            name='Rol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('grupo', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rol', to='auth.group')),
            ],
        ),
        migrations.AddField(
            model_name='usuario',
            name='rol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.rol'),
        ),
        migrations.CreateModel(
            name='Producto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('precio', models.DecimalField(decimal_places=2, max_digits=10)),
                ('marca', models.CharField(blank=True, max_length=100, null=True)),
                ('modelo', models.CharField(blank=True, max_length=100, null=True)),
                ('stock', models.IntegerField()),
                ('descripcion', models.TextField()),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='productos/')),
                ('garantia', models.ForeignKey(blank=True, help_text='Tipo de garantía del producto', null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.tipogarantia')),
            ],
        ),
        migrations.CreateModel(
            name='Venta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha', models.DateField()),
                ('cantidad', models.IntegerField()),
                ('precio_unitario', models.DecimalField(decimal_places=2, max_digits=10)),
                ('precio_total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('metodo_pago', models.CharField(max_length=50)),
                ('estado_venta', models.CharField(max_length=20)),
                ('hora_venta', models.TimeField()),
                ('carrito', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.carrito')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('promocion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.promocion')),
            ],
        ),
        migrations.CreateModel(
            name='Pago',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=10)),
                ('fecha_pago', models.DateTimeField(auto_now_add=True)),
                ('metodo_pago', models.CharField(default='tarjeta', max_length=50)),
                ('referencia', models.CharField(blank=True, help_text='N° de transacción, comprobante, etc.', max_length=100, null=True)),
                ('comprobante', models.FileField(blank=True, null=True, upload_to='comprobantes/')),
                ('observaciones', models.TextField(blank=True, null=True)),
                ('usuario', models.ForeignKey(blank=True, help_text='Usuario que realizó el pago', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pagos', to=settings.AUTH_USER_MODEL)),
                ('venta', models.ForeignKey(blank=True, help_text='Venta asociada al pago', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagos', to='app.venta')),
            ],
        ),
        migrations.CreateModel(
            name='VentaProducto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.IntegerField()),
                ('precio_unitario', models.DecimalField(decimal_places=2, max_digits=10)),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.producto')),
                ('venta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.venta')),
            ],
        ),
        migrations.CreateModel(
            name='CarritoItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(default=1)),
                ('carrito', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app.carrito')),
                ('producto', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.producto')),
            ],
            options={
                'db_table': 'carrito_item',
                'unique_together': {('carrito', 'producto')},
            },
        ),
    ]
